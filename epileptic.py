# -*- coding: utf-8 -*-
"""Epileptic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w083Fi87F82hPK-InjBU_GmVjEBMm41l
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# 1. Simulate or load your dataset

import pandas as pd

# Load your dataset
data = pd.read_csv("/content/Epileptic Seizure Recognition.csv")

# Split into features and labels
X = data.iloc[:, :-1].values  # Assuming last column is the label
y = data.iloc[:, -1].values   # Assuming last column is the target

# Proceed with preprocessing and training as in the previous example

# Assuming each sample has 178 EEG features (like the UCI Epileptic Seizure dataset)
# For real use, replace with loading actual data (e.g., with Pandas or Numpy)

# Synthetic dataset for demonstration
np.random.seed(0)
num_samples = 5000
X = np.random.rand(num_samples, 178)  # Features (EEG signals)
y = np.random.randint(0, 2, num_samples)  # Binary target: 0 = No seizure, 1 = Seizure

# 2. Preprocess data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 3. Build the neural network model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

# 4. Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 5. Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

# 6. Evaluate the model
y_pred = (model.predict(X_test) > 0.5).astype("int32")
accuracy = accuracy_score(y_test, y_pred)
print(f"Model accuracy on test data: {accuracy:.2f}")

# Optional: Save the trained model
# model.save("epilepsy_seizure_detector.h5")

# prompt: visualization

import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.figure(figsize=(12, 5))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc="lower right")

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc="upper right")

plt.tight_layout()
plt.show()

"""# visualize the classification performance on the test set.


"""

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Generate predictions and plot confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=['No Seizure', 'Seizure'])
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

# Table of " no seizure" & "Seizure"

# Assuming you have y_test and y_pred from your model evaluation
# Create a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Extract TN, FP, FN, TP from the confusion matrix
tn, fp, fn, tp = conf_matrix.ravel()

# Create a DataFrame for the table
table_data = {'': ['No Seizure', 'Seizure'],
              'No Seizure': [tn, fn],
              'Seizure': [fp, tp]}
table_df = pd.DataFrame(table_data)
table_df